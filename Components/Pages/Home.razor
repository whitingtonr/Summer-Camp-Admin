@page "/"
@using Summer_Camp_Admin.Models
@using System.Text.Json
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>

<MudGrid>
	<MudItem xs="12">
		<MudCard>
			<MudCardContent>
				<MudStack Row="true">
					<MudItem xs="3">
						<MudCard>
							<MudItem xs="12">
								<MudCardContent>
									@* **************************************** *@
									<MudText>Actions</MudText>
									<MudStack Row="true">
										<MudButton Variant="Variant.Filled" Color="Color.Primary">Show All Columns</MudButton>
										<MudButton OnClick="btnSaveSelected" Disabled="boolSaveButtonDisabled" Variant="Variant.Filled" Color="Color.Primary">Save Selected</MudButton>
										<MudButton OnClick="btnMsgbox" Variant="Variant.Filled" Color="Color.Primary">test</MudButton>
										<div class="virtualPlaceholder" style="display:block; height:48px; width:1px; background:#ffffff00;">
										</div>
									</MudStack>
								</MudCardContent>
							</MudItem>
						</MudCard>
					</MudItem>
					<MudItem xs="3">
						<MudCard>
							<MudItem xs="12">
								<MudCardContent>
									@* **************************************** *@
									<MudText>Select Random Rows</MudText>
									<MudStack Row="true">
										<MudButton OnClick="btnSelectRandom" Variant="Variant.Filled" Color="Color.Primary">Select</MudButton>
										<MudNumericField T="int" @ref="@intSelectRandom" Label="Count" Variant="Variant.Text" />
									</MudStack>
								</MudCardContent>
							</MudItem>
						</MudCard>
					</MudItem>
					<MudItem xs="3">
						<MudCard>
							<MudCardContent>
								@* ******************************************** *@
								<MudText>Change Status of Selected Rows</MudText>
								<MudStack Row="true">
									<MudButton Variant="Variant.Filled" Disabled="boolChangeStatusButtonDisabled" OnClick="btnSetStatus" Color="Color.Primary">Change Status</MudButton>
									<MudItem>
										<MudSelect T="string"
												   Label="Select Status"
												   Variant="Variant.Text"
												   @bind-Value="strSetStatusTo"
												   @bind-Value:after="enableChangeStatusButton"
												   Dense="true">
											@foreach (var status in statusLookupRows)
											{
												<MudSelectItem T="string" Value="@status.ID_Code">@status.Desc</MudSelectItem>
											}
										</MudSelect>
									</MudItem>
								</MudStack>
							</MudCardContent>
						</MudCard>
					</MudItem>
				</MudStack>
			</MudCardContent>
		</MudCard>
	</MudItem>
	<MudItem xs="12">
		<MudCard>
			<MudCardContent>
				<MudExpansionPanels>
					<MudExpansionPanel Text="@msg">
						@if (_events.Count > 0)
						{
							<div class="d-flex">
								<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
							</div>
						}
						@foreach (var message in _events)
						{
							<MudText Typo="@Typo.body2">@message</MudText>

							<br />
						}
					</MudExpansionPanel>
				</MudExpansionPanels>
			</MudCardContent>
		</MudCard>
	</MudItem>
	<MudItem xs="12">
		<MudCard>
			<MudCardContent>
				<MudDataGrid T="Summer_Camp_Main_Datagrid"
							 @ref="grid"
							 Dense="true"
							 Striped="true"
							 SortMode="SortMode.Multiple"
							 ColumnResizeMode="ResizeMode.Column"
							 DragDropColumnReordering="true"
							 Bordered="true"
							 Hover="true"
							 Filterable="true"
							 Hideable="true"
							 FilterMode="@DataGridFilterMode.ColumnFilterRow"
							 Items="@datagridRows"
							 MultiSelection="true"
							 RowsPerPage="100"
							 SelectedItemsChanged="@SelectedItemsChanged">
					<Columns>
						<SelectColumn T="Summer_Camp_Main_Datagrid" />
						<PropertyColumn Property="x => x.ID" Title="ID" />
						<PropertyColumn Property="x => x.FK_Status" Title="Status" />
						<PropertyColumn Property="x => x.FK_Student_Registration__Student_ID" Title="Student&nbsp;ID" />
						<PropertyColumn Property="x => x.WeekNbr" Title="Week" />
						<PropertyColumn Property="x => x.SchoolName" Title="School&nbsp;Name" CellStyle="white-space: nowrap;" />
						<PropertyColumn Property="x => x.Summer_Camp_Title" Title="Summer&nbsp;Camp&nbsp;Title" CellStyle="white-space: nowrap;" />
						<PropertyColumn Property="x => x.School_ID" Title="School&nbsp;ID" />
						<PropertyColumn Property="x => x.Location" Title="Location" />
						<PropertyColumn Property="x => x.Level" Title="Level" />
						<PropertyColumn Property="x => x.Grade" Title="Grade" />
						<PropertyColumn Property="x => x.CalendarYR" Title="Year" />
					</Columns>
					<PagerContent>
						<div style="display: flex; justify-content: center;">
							<MudDataGridPager T="Summer_Camp_Main_Datagrid" />
						</div>
					</PagerContent>
				</MudDataGrid>
			</MudCardContent>
		</MudCard>
	</MudItem>
</MudGrid>

@code
{
	List<Summer_Camp_Main_Datagrid> datagridRows = new List<Summer_Camp_Main_Datagrid>();
	List<Summer_Camp_Status_Lookup> statusLookupRows = new List<Summer_Camp_Status_Lookup>();
	public MudDataGrid<Summer_Camp_Main_Datagrid> grid = null;
	public MudNumericField<int> intSelectRandom = null;
	// public MudSelectItem<string> strSetStatusTo = null;
	public string strSetStatusTo = "";
	public bool boolChangeStatusButtonDisabled = true;
	public bool boolSaveButtonDisabled = true;
	private List<string> _events = new();
	private string msg = "";

	protected override async Task OnInitializedAsync()
	{
		msg = "Loading...";
		using var httpClient = HttpClientFactory.CreateClient();
		var response = await httpClient.GetStringAsync("https://localhost:7217/api/Registrations/summercampadmingrid");
		var jsonResponse = JsonSerializer.Deserialize<List<Summer_Camp_Main_Datagrid>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		datagridRows = jsonResponse.ToList();

		using var httpClient2 = HttpClientFactory.CreateClient();
		var response2 = await httpClient2.GetStringAsync("https://localhost:7217/api/Registrations/summercampstatuslookup");
		var jsonResponse2 = JsonSerializer.Deserialize<List<Summer_Camp_Status_Lookup>>(response2, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		statusLookupRows = jsonResponse2.ToList();
	}


	private void enableChangeStatusButton()
	{
		var selectedItems = grid.SelectedItems;
		msg = selectedItems.Count.ToString();
		if (selectedItems.Count > 0 && !string.IsNullOrEmpty(strSetStatusTo))
		{
			boolChangeStatusButtonDisabled = false;
		}
		else
		{
			boolChangeStatusButtonDisabled = true;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			msg = $"Loaded {datagridRows.Count} records";
			StateHasChanged();
		}
	}

	private async void btnMsgbox()
	{

		var selectedItems = grid.SelectedItems;

		bool? result = await DialogService.ShowMessageBox(
			"Warning",
			(MarkupString)$"You are about to set the status of {selectedItems.Count} of {grid.FilteredItems.ToList().Count} records to {strSetStatusTo}.",
			yesText: "Continue",
			cancelText: "Cancel");
		string state = result == null ? "Canceled" : "Deleted!";
		if (result == null)
		{
			// Cancel Update
		}
		else
		{
			_events.Insert(0, "you clicked continue");
		}
		//msg = $"{items.Count} of {grid.FilteredItems.ToList().Count} Camps Selected: ";

		// var dialog = DialogService.ShowMessageBox("Hello, World!", "This is a message box", yesText: "Yes", cancelText: "No");
		// bool? result = dialog.Result;
		_events.Insert(0, $"btnMsgbox clicked");
		_events.Insert(0, $"dialog result: {state}");
	}

	private async void btnSaveSelected()
	{
		var selectedItems = grid.SelectedItems;
		var jsonPayload = System.Text.Json.JsonSerializer.Serialize(selectedItems);

		bool? result = await DialogService.ShowMessageBox(
			"Warning",
			(MarkupString)$"You are about to set the status of {selectedItems.Count} of {grid.FilteredItems.ToList().Count} records to {strSetStatusTo}.",
			yesText: "Continue",
			cancelText: "Cancel");
		string state = result == null ? "Cancel" : "Save";
		if (result == null)
		{
			// Cancel Update
		}
		else
		{
			_events.Insert(0, "you clicked continue");

			using var httpClient = HttpClientFactory.CreateClient();
			var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");
			var httpResponseMessage = httpClient.PostAsync("https://localhost:7217/api/Registrations/summercampstatusupdate", content);
			var response = httpResponseMessage;

			if (response.Result.IsSuccessStatusCode)
			{
				_events.Insert(0, "Data successfully saved.");
			}
			else
			{
				_events.Insert(0, "Failed to save data.");
			}

			_events.Insert(0, $"StatusCode: {response.Result.StatusCode}");
			_events.Insert(0, $"Content: {response.Result.RequestMessage}");
			_events.Insert(0, $"btnSaveSelected clicked");
			StateHasChanged();
		}
	}

	void btnSetStatus()
	{
		var selectedItems = grid.SelectedItems;
		foreach (var item in selectedItems)
		{
			item.FK_Status = strSetStatusTo;
		}
		_events.Insert(0, $"btnSetStatus clicked and set to {strSetStatusTo}");
		boolSaveButtonDisabled = false;
		StateHasChanged();
	}

	void btnSelectRandom()
	{
		var random = new Random();
		var selectedItems = new HashSet<Summer_Camp_Main_Datagrid>();
		var itemsToSelect = grid.FilteredItems.OrderBy(x => random.Next()).Take(intSelectRandom.Value).ToList();
		foreach (var item in itemsToSelect)
		{
			selectedItems.Add(item);
		}
		grid.SelectedItems = selectedItems;

		StateHasChanged();
	}

	void SelectedItemsChanged(HashSet<Summer_Camp_Main_Datagrid> items)
	{
		enableChangeStatusButton();
		msg = $"{items.Count} of {grid.FilteredItems.ToList().Count} Camps Selected: ";
		_events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
	}

}