@page "/"
@using Summer_Camp_Admin.Models
@using System.Text.Json
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<MudGrid>
	<MudItem xs="12">
		<MudCard>
			<MudCardContent>
				<MudStack Row="true">
					<MudItem xs="4">
						<MudCard>
							<MudItem xs="12">
								<MudCardContent>
									@* **************************************** *@
									<MudText>Actions</MudText>
									<MudStack Row="true">
										<MudButton OnClick="btnHideColumns" Variant="Variant.Filled" Color="Color.Primary">Show All Columns</MudButton>
										<MudButton OnClick="btnToggleFilter" Variant="Variant.Filled" Color="Color.Primary">Toggle Filter</MudButton>
										<MudButton OnClick="btnSaveSelected" Disabled="boolSaveButtonDisabled" Variant="Variant.Filled" Color="Color.Primary">Save Selected</MudButton>
										<div class="virtualPlaceholder" style="display:block; height:48px; width:1px; background:#ffffff00;">
										</div>
									</MudStack>
								</MudCardContent>
							</MudItem>
						</MudCard>
					</MudItem>
					<MudItem xs="2">
						<MudCard>
							<MudItem xs="12">
								<MudCardContent>
									@* **************************************** *@
									<MudText>Select Random Rows</MudText>
									<MudStack Row="true">
										<MudButton OnClick="btnSelectRandom" Variant="Variant.Filled" Color="Color.Primary">Select</MudButton>
										<MudNumericField T="int" @ref="@intSelectRandom" Label="Count" Variant="Variant.Text" />
									</MudStack>
								</MudCardContent>
							</MudItem>
						</MudCard>
					</MudItem>
					<MudItem xs="3">
						<MudCard>
							<MudCardContent>
								@* ******************************************** *@
								<MudText>Change Status of Selected Rows</MudText>
								<MudStack Row="true">
									<MudButton Variant="Variant.Filled" Disabled="boolChangeStatusButtonDisabled" OnClick="btnSetStatus" Color="Color.Primary">Change Status</MudButton>
									<MudItem>
										<MudSelect T="string"
										Label="Select Status"
										Variant="Variant.Text"
										@bind-Value="strSetStatusTo"
										@bind-Value:after="enableChangeStatusButton"
										Dense="true">
											@foreach (var status in statusLookupRows)
											{
												<MudSelectItem T="string" Value="@status.ID_Code">@status.Desc</MudSelectItem>
											}
										</MudSelect>
									</MudItem>
								</MudStack>
							</MudCardContent>
						</MudCard>
					</MudItem>


				</MudStack>
			</MudCardContent>
		</MudCard>
	</MudItem>
	<MudItem xs="12">
		<MudCard>
			<MudCardContent>
				<MudDataGrid T="Summer_Camp_Main_Datagrid"
				@ref="grid"
				Dense="true"
				Striped="true"
				SortMode="@_sortMode"
				ColumnResizeMode="ResizeMode.Container"
				DragDropColumnReordering="false"
				Bordered="true"
				Hover="true"
				Filterable="@_filterable"
				Hideable="true"
				FilterMode="@_filterMode"
				Items="@datagridRows"
				MultiSelection="true"
				SelectOnRowClick="false"
				RowsPerPage="100"
				FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
				SelectedItemsChanged="@SelectedItemsChanged">
					<Columns>
						<SelectColumn T="Summer_Camp_Main_Datagrid" />
						<PropertyColumn Property="x => x.ID" Title="ID" Hidden />
						<PropertyColumn Property="x => x.FK_Status" Title="Status" />

						<PropertyColumn Property="x => x.FK_PCS_StudentLookup__Student_ID" Title="Student&nbsp;ID" Hidden/>
						<PropertyColumn Property="x => x.FirstName" Title="FName" />
						<PropertyColumn Property="x => x.LastName" Title="LName" />
						<PropertyColumn Property="x => x.SchoolName" Title="Student School" />
						<PropertyColumn Property="x => x.Grade" Title="Student Grade" />
						<PropertyColumn Property="x => x.PrimaryExceptionality" Title="Primary Exceptionality" />
						<PropertyColumn Property="x => x.LEP" Title="LEP" />
						<PropertyColumn Property="x => x.Gender" Title="Gender" />
						<PropertyColumn Property="x => x.EthnicCode" Title="Ethnic Code" />
						<PropertyColumn Property="x => x.FreeMeals" Title="Meal Code" Hidden/>

						<PropertyColumn Property="x => x.CalendarYR" Title="Year" Hidden />
						<PropertyColumn Property="x => x.WeekNbr" Title="Week" />
						<PropertyColumn Property="x => x.School_ID" Title="School&nbsp;ID" Hidden/>
						<PropertyColumn Property="x => x.CampName" Title="Camp&nbsp;Location" CellStyle="white-space: nowrap;" />
						<PropertyColumn Property="x => x.Summer_Camp_Title" Title="Summer&nbsp;Camp&nbsp;Title" CellStyle="white-space: nowrap;" />

						<PropertyColumn Property="x => x.UpdateUser" Title="Update User" Hidden/>
						<PropertyColumn Property="x => x.UpdateDate" Title="Update Date" Hidden/>

						<PropertyColumn Property="x => x.FK_Summer_Camp_Choice" Title="FK_Summer_Camp_Choice" Hidden />
					</Columns>
					<PagerContent>
						<div style="display: flex; justify-content: center;">
							<MudDataGridPager T="Summer_Camp_Main_Datagrid" />
						</div>
					</PagerContent>
				</MudDataGrid>
			</MudCardContent>
		</MudCard>
	</MudItem>
</MudGrid>

@code
{
	List<Summer_Camp_Main_Datagrid> datagridRows = new List<Summer_Camp_Main_Datagrid>();
	List<Summer_Camp_Status_Lookup> statusLookupRows = new List<Summer_Camp_Status_Lookup>();
	public MudDataGrid<Summer_Camp_Main_Datagrid> grid = null;
	public MudNumericField<int> intSelectRandom = null;
	// public MudSelectItem<string> strSetStatusTo = null;
	public string strSetStatusTo = "";
	public bool boolChangeStatusButtonDisabled = true;
	public bool boolSaveButtonDisabled = true;
	private List<string> _events = new();
	private string msg = "";
	public DataGridFilterMode _filterMode = DataGridFilterMode.ColumnFilterRow;
	public bool _filterable = true;
	private SortMode _sortMode = SortMode.Multiple;
	public string strApiUrl = "'https://localhost:7217/api/Registrations/";
	public string windowsUserName = "";
	private string apiUrl = "";
	
	protected override async Task OnInitializedAsync()
	{
		apiUrl = Configuration["ApiSettings:BaseUrl"];
		using var httpClient = HttpClientFactory.CreateClient();

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		windowsUserName = user.Identity.Name.Split('\\').Last();
		// msg = windowsUserName;
		
		// strUrl = $"{strApiUrl}summercampadmingrid";
		// var response = await httpClient.GetStringAsync("http://localhost:5252/api/Registrations/summercampadmingrid");
		var response = await httpClient.GetStringAsync(apiUrl + "/api/Registrations/summercampadmingrid");
		var jsonResponse = JsonSerializer.Deserialize<List<Summer_Camp_Main_Datagrid>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		datagridRows = jsonResponse.ToList();

		using var httpClient2 = HttpClientFactory.CreateClient();
		var response2 = await httpClient2.GetStringAsync(apiUrl + "/api/Registrations/summercampstatuslookup");
		var jsonResponse2 = JsonSerializer.Deserialize<List<Summer_Camp_Status_Lookup>>(response2, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		statusLookupRows = jsonResponse2.ToList();

		// strUrl = $"{strApiUrl}summercampadmingrid";
		// var response = await httpClient.GetStringAsync("http://localhost:5252/api/Registrations/summercampadmingrid");
		// var jsonResponse = JsonSerializer.Deserialize<List<Summer_Camp_Main_Datagrid>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		// datagridRows = jsonResponse.ToList();

		// using var httpClient2 = HttpClientFactory.CreateClient();
		// var response2 = await httpClient2.GetStringAsync("http://localhost:5252/api/Registrations/summercampstatuslookup");
		// var jsonResponse2 = JsonSerializer.Deserialize<List<Summer_Camp_Status_Lookup>>(response2, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
		// statusLookupRows = jsonResponse2.ToList();
	}


	private void enableChangeStatusButton()
	{
		var selectedItems = grid.SelectedItems;
		msg = selectedItems.Count.ToString();
		if (selectedItems.Count > 0 && !string.IsNullOrEmpty(strSetStatusTo))
		{
			boolChangeStatusButtonDisabled = false;
		}
		else
		{
			boolChangeStatusButtonDisabled = true;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// var varuser = Security.User;
			// var varuser = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
			// var varuser = Environment.UserName;
			// var user = "asdfasdfasdf";
			// msg = $"user: {varuser} ";
			StateHasChanged();
		}
	}

	private async void btnToggleFilter()
	{
		_filterable = !_filterable;
		if (_filterMode == DataGridFilterMode.ColumnFilterRow) { _filterMode = DataGridFilterMode.ColumnFilterMenu; } else { _filterMode = DataGridFilterMode.ColumnFilterRow; }
		// if (_sortMode == SortMode.Multiple) { _sortMode = SortMode.None; } else {	_sortMode = SortMode.Multiple;}
		StateHasChanged();
	}

	private async void btnSaveSelected()
	{
		var selectedItems = grid.SelectedItems;
		foreach (var item in selectedItems)
		{
			item.UpdateUser = windowsUserName; // Set the UpdateUser to the current user to record in status history table
		}
		var jsonPayload = System.Text.Json.JsonSerializer.Serialize(selectedItems);
		msg = jsonPayload;

		bool? result = await DialogService.ShowMessageBox(
			"Warning",
			(MarkupString)$"You are about to set the status of {selectedItems.Count} of {grid.FilteredItems.ToList().Count} records to {strSetStatusTo}.",
			yesText: "Continue",
			cancelText: "Cancel");
		string state = result == null ? "Cancel" : "Save";
		if (result == null)
		{
			// Cancel Update
		}
		else
		{
			_events.Insert(0, "you clicked continue");

			_events.Insert(0, $"Data: {jsonPayload}");

			using var httpClient = HttpClientFactory.CreateClient();
			var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");
			var httpResponseMessage = httpClient.PostAsync(apiUrl + "/api/Registrations/summercampstatusupdate", content);
			// var httpResponseMessage = httpClient.PostAsync("http://localhost:5252/api/Registrations/summercampstatusupdate", content);
			var response = httpResponseMessage;

			if (response.Result.IsSuccessStatusCode)
			{
				_events.Insert(0, "Data successfully saved.");
			}
			else
			{
				_events.Insert(0, "Failed to save data.");
			}

			_events.Insert(0, $"StatusCode: {response.Result.StatusCode}");
			_events.Insert(0, $"Content: {response.Result.RequestMessage}");
			_events.Insert(0, $"btnSaveSelected clicked");
			StateHasChanged();
		}
	}

	void btnSetStatus()
	{
		var selectedItems = grid.SelectedItems;
		foreach (var item in selectedItems)
		{
			item.FK_Status = strSetStatusTo;
		}
		_events.Insert(0, $"btnSetStatus clicked and set to {strSetStatusTo}");
		boolSaveButtonDisabled = false;
		StateHasChanged();
	}

	void btnSelectRandom()
	{
		var random = new Random();
		var selectedItems = new HashSet<Summer_Camp_Main_Datagrid>();
		var itemsToSelect = grid.FilteredItems.OrderBy(x => random.Next()).Take(intSelectRandom.Value).ToList();
		foreach (var item in itemsToSelect)
		{
			selectedItems.Add(item);
		}
		grid.SelectedItems = selectedItems;

		StateHasChanged();
	}

	private async Task btnHideColumns()
	{
		foreach (var column in grid.RenderedColumns)
		{
			await column.ShowAsync();
		};
	}

	void SelectedItemsChanged(HashSet<Summer_Camp_Main_Datagrid> items)
	{
		enableChangeStatusButton();
		msg = $"{items.Count} of {grid.FilteredItems.ToList().Count} Camps Selected: ";
		_events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
	}

}